name: Release Workflow

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      hasNextVersion: ${{ steps.version.outputs.hasNextVersion }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get next version
        uses: thenativeweb/get-next-version@2.6.3
        id: version

  create-release:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.hasNextVersion == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Update version in package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            npm version $NEW_VERSION --no-git-tag-version
          fi

      - name: Commit and push version changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if ! git diff --quiet || ! git diff --cached --quiet; then
            git add package.json
            git commit -m "chore: bump version to $NEW_VERSION"
            git push origin main
          fi

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.check-version.outputs.version }}"
          gh release create $NEW_VERSION \
            --title "Release $NEW_VERSION" \
            --notes "Automated release $NEW_VERSION" \
            --latest
